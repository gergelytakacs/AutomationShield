%   Creates a problem definition file for the muAOMPC model
%   predictive control package
%
%   The function requires a file name that will be written as a Python
%   script. Next, the user needs to input the state and input matrices
%   from the linear state-space model, state penalty and input penalty
%   matrices, sampling time, prediction horizon and minimal and maximal
%   input constraints. The file can then be supplied to the muAOMPC 
%   package (https://github.com/muaompc/muaompc) to generate
%   a fully functional MPC problem. 
%
%   This code is part of the AutomationShield hardware and software
%   ecosystem. Visit http://www.automationshield.com for more
%   details. This code is licensed under a Creative Commons
%   Attribution-NonCommercial 4.0 International License.
%
%   Created by:     Gergely Takács and Erik Mikuláš
%   Created on:     9.9.2020
%   Last update on: 8.8.2023

function muAOMPC_Problem(fileName, A, B, Q, R, P, N, n, m, umin, umax)
    
    filehandle = fopen([fileName, '.dat'], 'wt');

    fprintf(filehandle, '# MPC data file for muaOMPC in Python\n');
    fprintf(filehandle, '# Automatically generated by the AutomationShield library.\n');
    fprintf(filehandle, '# Visit www.automationshield.com for more information.\n');
    fprintf(filehandle, '# ========================================================\n');
    fprintf(filehandle, '\n');

    %fprintf(filehandle, ['dt = ', num2str(dt), '\t\t #Sampling\n']);
    fprintf(filehandle, ['N = ', num2str(N), '\t\t #Prediction horizon\n']);
    fprintf(filehandle, ['n = ', num2str(n), '\t\t #Dimension of strate vector\n']);
    fprintf(filehandle, ['m = ', num2str(m), '\t\t #Dimension of input vector\n']);


    fprintf(filehandle, ['u_lb = [', num2str(umin), '] \t\t # Lower input constraint\n']);
    fprintf(filehandle, ['u_ub = [', num2str(umax), '] \t\t # Upper input constraint\n']);

    matrixToMatlabText(filehandle, A);
    matrixToMatlabText(filehandle, B);
    matrixToMatlabText(filehandle, Q);
    matrixToMatlabText(filehandle, R);
    fprintf(filehandle, '\n');
    %fprintf(filehandle, ['P = "auto" \t\t # End penalty']);
    matrixToMatlabText(filehandle, P);
    fclose(filehandle);


    % generate muAOMPC problem file 

    filehandleprb = fopen([fileName, '.prb'], 'wt');

    %fprintf(filehandleprb, '# MPC problem definition file for muaOMPC in Python\n');
    %fprintf(filehandleprb, '# Automatically generated by the AutomationShield library.\n');
    %fprintf(filehandleprb, '# Visit www.automationshield.com for more information.\n');
    %fprintf(filehandleprb, '# ========================================================\n');
    %fprintf(filehandleprb, '\n');

    fprintf(filehandleprb, 'variable u[0:N-1](m);\n');
    fprintf(filehandleprb, 'auxs x[0:N](n);\n');
    fprintf(filehandleprb, 'parameters x_bar(n);\n');
    fprintf(filehandleprb, 'minimize sum(quad(x[i],Q)+quad(u[i], R), i=0:N-1)+quad(x[N],P);\n');
    fprintf(filehandleprb, 'subject to x[i+1] = A*x[i]+B*u[i], i=0:N-1;\n');
    fprintf(filehandleprb, 'u_lb <= u[i] <= u_ub, i=0:N-1;\n');
    fprintf(filehandleprb, 'x[0]=x_bar;\n');



    disp([' MPC problem and data exported to "', fileName, '.prb" and "', fileName, '.dat".'])
end